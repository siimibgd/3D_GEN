import open3d as o3d
import numpy as np
import cv2
import os

# ÃŽncarcÄƒ norul de puncte cu culoare (obÈ›inut din imaginea stÃ¢ngÄƒ)
pcd = o3d.io.read_point_cloud("point_cloud.ply")
print("âœ… Norul de puncte a fost Ã®ncÄƒrcat")

# EstimeazÄƒ normalele
print("ðŸ”„ EstimÄƒm normalele...")
pcd.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius=0.1, max_nn=30))

# Downsampling (opÈ›ional, pentru performanÈ›Äƒ)
pcd = pcd.voxel_down_sample(voxel_size=0.01)

# Generare mesh cu Poisson (alternativ la Ball Pivoting)
print("ðŸ”„ GenerÄƒm mesh-ul (Poisson Reconstruction)...")
mesh, densities = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(pcd, depth=10)
print("âœ… Mesh generat cu succes!")

# Crop la bounding box-ul norului de puncte (pentru a elimina mesh-uri Ã®n afara scenei)
bbox = pcd.get_axis_aligned_bounding_box()
mesh = mesh.crop(bbox)

# AplicÄƒ textura: convertim imaginea Ã®ntr-un mesh texturat manual
# ÃŽn acest caz, salvÄƒm doar culorile punctelor pe mesh-ul triangulat

# Vizualizare mesh + culoare din point cloud
print("ðŸŽ¨ AplicÄƒm culorile din point cloud pe mesh...")
mesh.vertex_colors = pcd.colors  # simplu, dar eficient

# SalveazÄƒ È™i vizualizeazÄƒ
o3d.io.write_triangle_mesh("textured_mesh.ply", mesh)
print("âœ… Mesh salvat ca textured_mesh.ply")
o3d.visualization.draw_geometries([mesh])